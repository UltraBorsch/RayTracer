#pragma kernel TraceRays
#pragma kernel CorrectImage
#pragma kernel AAReduction

#include "Includes/Geometry.cginc" //already includes constants and structs

//global variables that do not change
float4 ambientColour, skyColour;
float ambientIntensity;

RWTexture2D<float4> result; //raytrace result
float4 resolution; //.x and .y are the resolution, .z and .w are the correspondeg inverses
float samples, sampleInv, nextSampleInv, sampleSquare, sampleSquareInv;
RWStructuredBuffer<float4> AAResults;

//d is (i think) focal length. near/far planes not considered yet
float3 camDirection; //direction TO cam, not direction cam is facing
float3 camPosition;

//variables for generating rays
float d;
float top;
float right;
float bottom;
float left;
float3 u;
float3 v;

RWStructuredBuffer<Light> lights;
int lightCount;
RWStructuredBuffer<Mat> mats;
int matCount;

//scene objects
RWStructuredBuffer<Sphere> spheres;
int sphereCount;

RWStructuredBuffer<Plane> planes;
int planeCount;

RWStructuredBuffer<Quadric> quadrics;
int quadricCount;

RWStructuredBuffer<AABB> boxes;
int AABBCount;

RWStructuredBuffer<Mesh> meshes;
int meshCount;

//mesh buffers
RWStructuredBuffer<float3> vertices;
RWStructuredBuffer<float3> normals;
RWStructuredBuffer<int3> triangles;
int vertexCount, triangleCount;

Intersection CheckForIntersections( RWStructuredBuffer<Mesh> objs, int count, Intersection intersection, Ray ray);
Intersection CheckIntersections (Ray ray, Intersection intersection) {
    intersection = CheckForIntersections(spheres, sphereCount, intersection, ray);
    intersection = CheckForIntersections(planes, planeCount, intersection, ray);
    intersection = CheckForIntersections(quadrics, quadricCount, intersection, ray);
    intersection = CheckForIntersections(boxes, AABBCount, intersection, ray);
    return CheckForIntersections(meshes, meshCount, intersection, ray);
}

//Note, product must be <= 1024
[numthreads(16, 16, 4)]
void TraceRays (uint3 id : SV_DispatchThreadID) {
    if (id.x >= (uint) resolution.x || id.y >= (uint) resolution.y || id.z >= (uint) sampleSquare) return;
    
    //declare/create variables to reduce unnecessary memory allocation in loops
    int index;
    float tl, attenuation, dist;
    float3 lightDir, h;
    float4 colour = float4(0, 0, 0, 1), lambertian, blinnPhong;
    Light light;
    Mat mat;
    Ray shadowRay;
    Intersection shadowIntersection = GenerateIntersection();
    
    //create ray
    float2 sample = float2(id.z % samples, (int) (id.z * sampleInv)) + 1;
    sample = sample * nextSampleInv - 0.5;
    sample = mul(ROTATE26, sample);
    sample += id.xy + 0.5;
    
    //keep sample within current pixel
    sample.x = max(min(id.x + 1, sample.x), id.x);
    sample.y = max(min(id.y + 1, sample.y), id.y);

    float su = left + (right - left) * sample.x * resolution.z;
    float sv = bottom + (top - bottom) * sample.y * resolution.w;
    float3 dir = normalize(su * u + sv * v - d * camDirection);

    Ray ray = GenerateRay(camPosition, dir);
    Intersection intersection = GenerateIntersection();
    intersection = CheckIntersections(ray, intersection);
    
    if (intersection.t < INF) {
        mat = mats[intersection.matId];
        for (int i = 0; i < lightCount; i++) {
            light = lights[i];
            if (light.directional)
                lightDir = -light.direction; 
            else
                lightDir = normalize(light.position - intersection.position);
             
            //check if point is in shadow
            //if not, lambertian, phong, attenuation, etc
            shadowRay.Set(intersection.position + EPSILON * -lightDir, lightDir);
            shadowIntersection.Reset();
            shadowIntersection = CheckIntersections(shadowRay, shadowIntersection);
            tl = (light.position.x - shadowRay.origin.x) * shadowRay.invDirection.x;
            if (shadowIntersection.t <= tl)
                continue;
            
            lambertian = light.intensity * light.lightColour * mat.diffuseColour * max(0, dot(intersection.normal, lightDir));

            //bisector of direction to light and direction to cam
            h = normalize(-dir + lightDir);
            
            blinnPhong = light.intensity * light.lightColour * mat.specularColour * pow(max(0, dot(intersection.normal, h)), mat.hardness);

            //only calculate distance if both the lights linear and quadratic attenuation values are not 0
            if (!light.directional && (light.attenuation.x > 0 || light.attenuation.y > 0))
                dist = distance(light.position, intersection.position);
            else
                dist = 0;
            attenuation = 1 + light.attenuation.x * dist * dist + light.attenuation.y * dist + light.attenuation.z;
            attenuation = 1 / attenuation;
            //should clamp attenuation, so light sorces dont light to infinity
            attenuation = (attenuation - EPSILON) / (1 - EPSILON);
            attenuation = max(attenuation, 0);
            
            colour += (lambertian + blinnPhong) * attenuation;
        }

        colour += ambientIntensity * ambientColour;
    } else colour = skyColour;
    
    colour *= sampleSquareInv;
    index = id.y * resolution.x * sampleSquare + id.x * sampleSquare;
    
    AAResults[index + id.z] = colour;
}

[numthreads(32, 32, 1)]
void CorrectImage (uint3 id : SV_DispatchThreadID) {
    if (id.x >= (uint) resolution.x || id.y >= (uint) resolution.y) return;
    int i = id.y * resolution.x * sampleSquare + id.x * sampleSquare;
    for (int z = 0; z < sampleSquare; z++)
        result[id.xy] += AAResults[i + z];
}

[numthreads(1, 1, 64)]
void AAReduction (uint3 id : SV_DispatchThreadID) {
    if (id.x >= (uint) resolution.x || id.y >= (uint) resolution.y || id.z > (uint) (sampleSquare * 0.5)) return;
    int i = id.y * resolution.x * sampleSquare + id.x * sampleSquare + id.z;
    
    float next = (int) (sampleSquare * 0.5);
    
    while ((uint) next > id.z) {
        AAResults[i] += AAResults[i + next];
        next = next * 0.5;
        GroupMemoryBarrierWithGroupSync();
    }
    
    if (id.z == 0)
        result[id.xy] = AAResults[i];
}

Intersection CheckForIntersections (RWStructuredBuffer<Mesh> objs, int count, Intersection intersection, Ray ray) {
    float tmin, tmax, bmin, bmax, dmin, dmax;
    
    for (int i = 0; i < count; i++) {
        Mesh mesh = objs[i];
                
        tmin = 0;
        tmax = intersection.t;
        
        for (int j = 0; j < 3; j++) {
            bmin = mesh.corners[ray.negativeDir[j]][j];
            bmax = mesh.corners[!ray.negativeDir[j]][j];
            
            dmin = (bmin - ray.origin[j]) * ray.invDirection[j];
            dmax = (bmax - ray.origin[j]) * ray.invDirection[j];
            
            tmin = max(dmin, tmin);
            tmax = min(dmax, tmax);
        }
        
        if (tmin > tmax || tmin <= EPSILON) continue;
        
        /*vars needed:
            v2 - v1, v3 - v1, v1*/
        for (int k = mesh.triStart; k < mesh.triStart + mesh.triCount; k++) {
            int3 tri = triangles[k];
            float3 v1 = vertices[tri.x], v2 = vertices[tri.y], v3 = vertices[tri.z];
            float3 n1 = normals[tri.x], n2 = normals[tri.y], n3 = normals[tri.z];
            float3 pvec = cross(ray.direction, v3 - v1);
            
            float det = dot(v2 - v1, pvec);
            
            if (det <= EPSILON) continue;
            
            float detInv = 1 / det;
            
            float3 tvec = ray.origin - v1;
            float3 qvec = cross(tvec, v2 - v1);
            
            float t = dot(v3 - v1, qvec) * detInv;
            if (t <= EPSILON || t > intersection.t) continue;
            
            float u = dot(tvec, pvec) * detInv;
            if (u < 0 || u > 1) continue;
            
            float v = dot(ray.direction, qvec) * detInv;
            if (v < 0 || u + v > 1) continue;
            
            float3 normal = (1 - u - v) * n1 + u * n2 + v * n3;
            intersection = GenerateIntersection(t, normal, ray.Extend(t), mesh.matId);
        }

    }
    
    return intersection;
}