// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel TraceRays
#include "Includes/Geometry.cginc" //already includes constants

RWTexture2D<float4> result; //raytrace result

//global variables that do not change
uint2 resolution;
float4 ambientColour;
float ambientIntensity;

//d is (i think) focal length. near/far planes not considered yet
float3 camDirection; //direction TO cam, not direction cam is facing
float3 camPosition;

//variables for generating rays
float d;
float top;
float right;
float bottom;
float left;
float3 u;
float3 v;


RWStructuredBuffer<Light> lights;
int lightCount;
RWStructuredBuffer<Mat> mats;
int matCount;

//scene objects
RWStructuredBuffer<Sphere> spheres;
int sphereCount;

[numthreads(32,32,1)]
void TraceRays (uint3 id : SV_DispatchThreadID) {
    if (id.x >= resolution.x || id.y >= resolution.y) return;

    float x = id.x + 0.5f;
    float y = id.y + 0.5f;

    float su = left + (right - left) * x / resolution.x;
    float sv = bottom + (top - bottom) * y / resolution.y;
    float3 dir = normalize(su * u + sv * v - d * camDirection); 

    Ray ray = GenerateRay(camPosition, dir);
    Intersection intersection = GenerateIntersection();

    intersection = CheckForIntersections(spheres, sphereCount, intersection, ray);
    
    float4 colour = float4(0, 0, 0, 1);
    if (intersection.t < INF) {
        Mat mat = mats[intersection.matId];
        for (int i = 0; i < lightCount; i++) {
            Light light = lights[i];
            float3 lightDir;
            if (light.directional)
                lightDir = -light.direction; 
            else
                lightDir = normalize(light.position - intersection.position);
                        //check if point is in shadow
                        //if not, lambertian, phong, attenuation, etc
            float4 lambertian = light.intensity * light.lightColour * mat.diffuseColour * max(0, dot(intersection.normal, lightDir));

            float3 h = normalize(-dir + lightDir);
            float4 bp = light.intensity * light.lightColour * mat.specularColour * pow(max(0, dot(intersection.normal, h)), mat.hardness);

            colour += lambertian + bp;
        }

        colour += ambientIntensity * ambientColour;        
    }
    result[id.xy] = colour;
}